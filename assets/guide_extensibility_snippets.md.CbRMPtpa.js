import{_ as p,C as o,c as i,o as r,a2 as l,j as s,G as t,a as n}from"./chunks/framework.CwCSXIY0.js";const D=JSON.parse('{"title":"Snippets","description":"","frontmatter":{"title":"Snippets"},"headers":[],"relativePath":"guide/extensibility/snippets.md","filePath":"guide/extensibility/snippets.md","lastUpdated":1738542678000}'),c={name:"guide/extensibility/snippets.md"};function d(u,e,b,m,y,h){const a=o("Key");return r(),i("div",null,[e[19]||(e[19]=l(`<h1 id="snippets" tabindex="-1">Snippets <a class="header-anchor" href="#snippets" aria-label="Permalink to &quot;Snippets&quot;">​</a></h1><p>Whether you are coding or writing the next vampire best-seller, you&#39;re likely to need certain short fragments of text again and again. Use snippets to save yourself tedious typing. Snippets are smart templates that will insert text for you and adapt it to their context.</p><p>To create a new snippet, select <strong>Tools | Developer | New Snippet...</strong> Sublime Text will present you with a skeleton for it.</p><p>Snippets can be stored under any package&#39;s folder, but to keep it simple while you&#39;re learning, you can save them to your <code>Packages/User</code> folder.</p><h2 id="snippets-file-format" tabindex="-1">Snippets File Format <a class="header-anchor" href="#snippets-file-format" aria-label="Permalink to &quot;Snippets File Format&quot;">​</a></h2><p>Snippets typically live in a Sublime Text package. They are simplified XML files with the extension <code>.sublime-snippet</code>. For instance, you could have a <code>greeting.sublime-snippet</code> inside an <em>Email</em> package.</p><p>The structure of a typical snippet is as follows (including the default hints Sublime Text inserts for your convenience):</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">snippet</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">content</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;">&lt;![CDATA[</span><span style="color:#C3E88D;">Type your snippet here</span><span style="color:#89DDFF;">]]&gt;</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">content</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- Optional: Tab trigger to activate the snippet --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">tabTrigger</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">xyzzy</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">tabTrigger</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- Optional: Scope the tab trigger will be active in --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">source.python</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">scope</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    &lt;!-- Optional: Description to show in the menu --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;</span><span style="color:#F07178;">description</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">My Fancy Snippet</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">description</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">snippet</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>The <code>snippet</code> element contains all the information Sublime Text needs in order to know <em>what</em> to insert, <em>whether</em> to insert and <em>when</em>. Let&#39;s look at each of these parts in turn.</p>`,9)),s("dl",null,[e[2]||(e[2]=l("<dt><code>content</code></dt><dd><p>The actual snippet. Snippets can range from simple to fairly complex templates. We&#39;ll look at examples of both later.</p><p>Keep the following in mind when writing your own snippets:</p><ul><li><p>If you want to get a literal <code>$</code>, you have to escape it like this: <code>\\$</code>.</p></li><li><p>When writing a snippet that contains indentation, always use tabs. When the snippet is inserted, the tabs will be transformed into spaces if the option <code>translate_tabs_to_spaces</code> is <code>true</code>.</p></li><li><p>The <code>content</code> must be included in a <code>&lt;![CDATA[…]]&gt;</code> section. Snippets won&#39;t work if you don&#39;t do this!</p></li><li><p>The <code>content</code> of your snippet must not contain <code>]]&gt;</code> because this string of characters will prematurely close the <code>&lt;![CDATA[…]]&gt;</code> section, resulting in an XML error. To work around this pitfall, you can insert an undefined variable into the string like this: <code>]]$NOT_DEFINED&gt;</code>. This modified string passes through the XML parser without closing the content element&#39;s <code>&lt;![CDATA[…]]&gt;</code> section, but Sublime Text will replace <code>$NOT_DEFINED</code> with an empty string before inserting the snippet into your file. In other words, <code>]]$NOT_DEFINED&gt;</code> in your snippet file <code>content</code> will be written as <code>]]&gt;</code> when you trigger the snippet.</p></li></ul></dd><dt><code>tabTrigger</code></dt>",3)),s("dd",null,[s("p",null,[e[0]||(e[0]=n("Defines the sequence of keys that must be pressed to insert this snippet. After typing this sequence, the snippet will kick in as soon as you hit the ")),t(a,{k:"tab"}),e[1]||(e[1]=n(" key."))])]),e[3]||(e[3]=s("dt",null,[s("code",null,"scope")],-1)),e[4]||(e[4]=s("dd",null,[s("p",null,[n("Scope selector determining the context where the snippet will be active. See "),s("a",{href:"/guide/extensibility/syntaxdefs.html#scopes"},"Scopes"),n(" for more information.")])],-1)),e[5]||(e[5]=s("dt",null,[s("code",null,"description")],-1)),e[6]||(e[6]=s("dd",null,[s("p",null,"Used when showing the snippet in the Snippets menu. If not present, Sublime Text defaults to the file name of the snippet.")],-1))]),e[20]||(e[20]=l(`<p>With this information, you can start writing your own snippets as described in the next sections.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>In the interest of brevity, we&#39;re only including the <code>content</code> element&#39;s text in examples unless otherwise noted.</p></div><h2 id="snippet-features" tabindex="-1">Snippet Features <a class="header-anchor" href="#snippet-features" aria-label="Permalink to &quot;Snippet Features&quot;">​</a></h2><h3 id="environment-variables" tabindex="-1">Environment Variables <a class="header-anchor" href="#environment-variables" aria-label="Permalink to &quot;Environment Variables&quot;">​</a></h3><p>Snippets have access to contextual information in the form of environment variables. The values of the variables listed below are set automatically by Sublime Text.</p><table tabindex="0"><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>$PARAM1 .. $PARAMn</code></td><td>Arguments passed to the <code>insert_snippet</code> command. (Not covered here.)</td></tr><tr><td><code>$SELECTION</code></td><td>The text that was selected when the snippet was triggered.</td></tr><tr><td><code>$TM_CURRENT_LINE</code></td><td>Content of the cursor&#39;s line when the snippet was triggered.</td></tr><tr><td><code>$TM_CURRENT_WORD</code></td><td>Word under the cursor when the snippet was triggered.</td></tr><tr><td><code>$TM_DIRECTORY</code></td><td>Directory name of the file being edited. (since 3154)</td></tr><tr><td><code>$TM_FILENAME</code></td><td>Name of the file being edited, including extension.</td></tr><tr><td><code>$TM_FILEPATH</code></td><td>Path to the file being edited.</td></tr><tr><td><code>$TM_FULLNAME</code></td><td>User&#39;s user name.</td></tr><tr><td><code>$TM_LINE_INDEX</code></td><td>Column where the snippet is being inserted, 0 based.</td></tr><tr><td><code>$TM_LINE_NUMBER</code></td><td>Row where the snippet is being inserted, 1 based.</td></tr><tr><td><code>$TM_SELECTED_TEXT</code></td><td>An alias for <strong>$SELECTION</strong>.</td></tr><tr><td><code>$TM_SCOPE</code></td><td>The scope of the beginning of each selected region. (since 3154)</td></tr><tr><td><code>$TM_SOFT_TABS</code></td><td><code>YES</code> if <code>translate_tabs_to_spaces</code> is true, otherwise <code>NO</code>.</td></tr><tr><td><code>$TM_TAB_SIZE</code></td><td>Spaces per-tab (controlled by the <code>tab_size</code> option).</td></tr></tbody></table><p>Let&#39;s see a simple example of a snippet using variables:</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">=================================</span></span>
<span class="line"><span style="color:#BABED8;">USER NAME:          </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">TM_FULLNAME</span></span>
<span class="line"><span style="color:#BABED8;">FILE NAME:          </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">TM_FILENAME</span></span>
<span class="line"><span style="color:#BABED8;"> TAB SIZE:          </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">TM_TAB_SIZE</span></span>
<span class="line"><span style="color:#BABED8;">SOFT TABS:          </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">TM_SOFT_TABS</span></span>
<span class="line"><span style="color:#BABED8;">=================================</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output:</span></span>
<span class="line"><span style="color:#BABED8;">=============================</span></span>
<span class="line"><span style="color:#BABED8;">USER NAME:          guillermo</span></span>
<span class="line"><span style="color:#BABED8;">FILE NAME:          test.txt</span></span>
<span class="line"><span style="color:#BABED8;"> TAB SIZE:          4</span></span>
<span class="line"><span style="color:#BABED8;">SOFT TABS:          YES</span></span>
<span class="line"><span style="color:#BABED8;">=============================</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h3>`,9)),s("p",null,[e[7]||(e[7]=n("With the help of field markers, you can cycle through positions within the snippet by pressing the ")),t(a,{k:"tab"}),e[8]||(e[8]=n(" key. Fields are used to walk you through the customization of a snippet after it's been inserted."))]),e[21]||(e[21]=l(`<div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">First Name: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">1</span></span>
<span class="line"><span style="color:#BABED8;">Second Name: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">2</span></span>
<span class="line"><span style="color:#BABED8;">Address: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,1)),s("p",null,[e[9]||(e[9]=n("In the example above, the cursor will jump to ")),e[10]||(e[10]=s("code",null,"$1",-1)),e[11]||(e[11]=n(" if you press ")),t(a,{k:"tab"}),e[12]||(e[12]=n(" once. If you press ")),t(a,{k:"tab"}),e[13]||(e[13]=n(" a second time, it will advance to ")),e[14]||(e[14]=s("code",null,"$2",-1)),e[15]||(e[15]=n(", etc. You can also move backwards in the series with ")),t(a,{k:"shift+tab"}),e[16]||(e[16]=n(". If you press"))]),t(a,{k:"tab"}),e[22]||(e[22]=n(" after the highest tab stop, Sublime Text will place the cursor at the")),e[23]||(e[23]=s("p",null,"end of the snippet's content so that you can resume normal editing.",-1)),e[24]||(e[24]=s("p",null,[n("If you want to control where the exit point should be, use the "),s("code",null,"$0"),n(" mark. By default, this is the end of the snippet.")],-1)),s("p",null,[e[17]||(e[17]=n("You can break out of the field cycle any time by pressing ")),t(a,{k:"escape"}),e[18]||(e[18]=n("."))]),e[25]||(e[25]=l(`<h3 id="mirrored-fields" tabindex="-1">Mirrored Fields <a class="header-anchor" href="#mirrored-fields" aria-label="Permalink to &quot;Mirrored Fields&quot;">​</a></h3><p>Identical field markers mirror each other: when you edit the first one, the rest will be populated in real time with the same value.</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">First Name: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">1</span></span>
<span class="line"><span style="color:#BABED8;">Second Name: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">2</span></span>
<span class="line"><span style="color:#BABED8;">Address: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">3</span></span>
<span class="line"><span style="color:#BABED8;">User name: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>In this example, &quot;User name&quot; will be filled out with the same value as &quot;First Name&quot;.</p><h3 id="placeholders" tabindex="-1">Placeholders <a class="header-anchor" href="#placeholders" aria-label="Permalink to &quot;Placeholders&quot;">​</a></h3><p>By expanding the field syntax a little bit, you can define default values for a field. Placeholders are useful whenever there&#39;s a general case for your snippet, but you still want to keep it customizable.</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">First Name: \${1:Guillermo}</span></span>
<span class="line"><span style="color:#BABED8;">Second Name: \${2:López}</span></span>
<span class="line"><span style="color:#BABED8;">Address: \${3:Main Street 1234}</span></span>
<span class="line"><span style="color:#BABED8;">User name: </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Variables can be used as placeholders:</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">First Name: \${1:Guillermo}</span></span>
<span class="line"><span style="color:#BABED8;">Second Name: \${2:López}</span></span>
<span class="line"><span style="color:#BABED8;">Address: \${3:Main Street 1234}</span></span>
<span class="line"><span style="color:#BABED8;">User name: \${4:</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">TM_FULLNAME}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>And you can nest placeholders within other placeholders too:</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">Test: \${1:Nested \${2:Placeholder}}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="substitutions" tabindex="-1">Substitutions <a class="header-anchor" href="#substitutions" aria-label="Permalink to &quot;Substitutions&quot;">​</a></h3><p>In addition to the place holder syntax, tab stops can specify more complex operations with substitutions. Use substitutions to dynamically generate text based on a mirrored tab stop. Of course, the tab stop you want to use as variable has to be mirrored somewhere else in the snippet.</p><p>The substitution syntax has the following syntaxes:</p><ul><li><code>\${var_name/regex/format_string/}</code></li><li><code>\${var_name/regex/format_string/options}</code></li></ul><dl><dt><strong>var_name</strong></dt><dd><p>The variable name: <code>1</code>, <code>2</code>… or an environment variable such as <code>TM_FILENAME</code> or <code>SELECTION</code>.</p></dd><dt><strong>regex</strong></dt><dd><p>Perl-style regular expression: See the <a href="https://www.boost.org/doc/libs/release/libs/regex/doc/html/boost_regex/syntax/perl_syntax.html" target="_blank" rel="noreferrer">Boost library documentation for regular expressions</a>.</p></dd><dt><strong>format_string</strong></dt><dd><p>See the <a href="https://www.boost.org/doc/libs/release/libs/regex/doc/html/boost_regex/format/boost_format_syntax.html" target="_blank" rel="noreferrer">Boost library documentation for format strings</a>.</p></dd><dt><strong>options</strong></dt><dd><p>Optional. May be any of the following:</p><dl><dt><strong>i</strong></dt><dd>Case-insensitive regex.</dd><dt><strong>g</strong></dt><dd>Replace all occurrences of <code>regex</code>.</dd><dt><strong>m</strong></dt><dd>Don&#39;t ignore newlines in the string.</dd></dl></dd></dl><p>With substitutions you can, for instance, underline text effortlessly:</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#BABED8;">      Original: \${1:Hey, Joe!}</span></span>
<span class="line"><span style="color:#BABED8;">Transformation: \${1/./=/g}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      Original: Hey, Joe!</span></span>
<span class="line"><span style="color:#BABED8;">Transformation: =========</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Another more complex example can translate snail_case to Tile Case With Spaces. Basically, it combines two separate expressions and replaces into one. It also illustrates that replaces may occur before the actual tabstop.</p><pre class="language-perl line-numbers"><code>
Transformation: \${1/^(\\w)|(?:_(\\w))/(?1\\u$1:)(?2 \\u$2:)/g}
      Original: \${1:text_in_snail_case}

# Output:

Transformation: Text In Snail Case
      Original: text_in_snail_case
</code>
</pre><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">Transformation: \${1/^(\\w)|(?:_(\\w))/(?1\\u</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">1:)(?2 \\u</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">2:)/g}</span></span>
<span class="line"><span style="color:#BABED8;">      Original: \${1:text_in_snail_case}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Transformation: Text In Snail Case</span></span>
<span class="line"><span style="color:#BABED8;">      Original: text_in_snail_case</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>You can also use environment variables with substitutions:</p><div class="language-perl line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">perl</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># In file MyModule.js:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Transformation: \${TM_FILENAME/(\\w+)\\.js/\\1/g}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Output:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Transformation: MyModule</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,23))])}const f=p(c,[["render",d]]);export{D as __pageData,f as default};
