(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{497:function(e,t,a){"use strict";a.r(t);var n=a(18),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block seealso"},[a("p",{staticClass:"custom-block-title"},[e._v("See Also")]),a("dl",[a("dt",[a("RouterLink",{attrs:{to:"/reference/python_api.html"}},[e._v("API Reference")])],1),e._v(" "),a("dd",[e._v("More information on the Python API.")])])]),a("p",[e._v("Plugins are Python scripts\nsubclassing any of the "),a("code",[e._v("*Command")]),e._v(" or "),a("code",[e._v("*Listener")]),e._v(" classes\nfrom the "),a("code",[e._v("sublime_plugin")]),e._v(" module.")]),e._v(" "),a("h2",{attrs:{id:"where-to-store-plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-to-store-plugins"}},[e._v("#")]),e._v(" Where to Store Plugins")]),e._v(" "),a("p",[e._v("Sublime Text will look for plugins in these places:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Packages")])]),e._v(" "),a("li",[a("code",[e._v("Packages/<pkg_name>")])]),e._v(" "),a("li",[a("code",[e._v(".sublime-package")]),e._v(" files")])]),e._v(" "),a("p",[e._v("Plugin files nested deeper in "),a("code",[e._v("Packages")]),e._v(" won't be loaded.")]),e._v(" "),a("p",[e._v("All plugins should live inside a folder of their own and not directly\nunder "),a("code",[e._v("Packages")]),e._v(". This will spare you confusions when Sublime Text attempts\nto sort packages for loading.")]),e._v(" "),a("h2",{attrs:{id:"conventions-for-command-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conventions-for-command-names"}},[e._v("#")]),e._v(" Conventions for Command Names")]),e._v(" "),a("p",[e._v("By convention, Sublime Text command class names are suffixed with "),a("code",[e._v("Command")]),e._v("\nand written as "),a("code",[e._v("NamesLikeThisCommand")]),e._v(".")]),e._v(" "),a("p",[e._v("However, command names are automatically transformed from "),a("code",[e._v("NamesLikeThisCommand")]),e._v("\nto "),a("code",[e._v("name_like_this")]),e._v(". Thus, "),a("code",[e._v("ExampleCommand")]),e._v(" would become "),a("code",[e._v("example")]),e._v(",\nand "),a("code",[e._v("AnotherExampleCommand")]),e._v(" would become "),a("code",[e._v("another_example")]),e._v(".")]),e._v(" "),a("p",[e._v("In names for classes defining commands, use "),a("code",[e._v("NameLikeThisCommand")]),e._v(". To call a\ncommand from the API, use the standardized "),a("code",[e._v("name_like_this")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"types-of-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-of-commands"}},[e._v("#")]),e._v(" Types of Commands")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("sublime_plugin.ApplicationCommand")])]),e._v(" "),a("li",[a("code",[e._v("sublime_plugin.WindowCommand")])]),e._v(" "),a("li",[a("code",[e._v("sublime_plugin.TextCommand")])])]),e._v(" "),a("p",[e._v("Instances of "),a("code",[e._v("WindowCommand")]),e._v(" have a "),a("code",[e._v(".window")]),e._v(" attribute pointing to the\nwindow instance that created them. Similarly, instances of "),a("code",[e._v("TextCommand")]),e._v("\nhave a "),a("code",[e._v(".view")]),e._v(" attribute.\n"),a("code",[e._v("ApplicationCommand")]),e._v(" instances don't have either.")]),e._v(" "),a("h3",{attrs:{id:"shared-traits-for-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shared-traits-for-commands"}},[e._v("#")]),e._v(" Shared Traits for Commands")]),e._v(" "),a("p",[e._v("All commands must implement a "),a("code",[e._v(".run()")]),e._v(" method.")]),e._v(" "),a("p",[e._v("All commands may additionally provide methods to change their\nvisibility,\nenabled state,\ndefault caption in menus,\nor even their name (discouraged).")]),e._v(" "),a("h2",{attrs:{id:"how-to-call-commands-from-the-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-call-commands-from-the-api"}},[e._v("#")]),e._v(" How to Call Commands from the API")]),e._v(" "),a("p",[e._v("Depending on the type of command, use a reference to a "),a("code",[e._v("View")]),e._v(" or a "),a("code",[e._v("Window")]),e._v("\nand call "),a("code",[e._v("<object>.run_command('command_name')")]),e._v(". In addition to the command's\nname, "),a("code",[e._v(".run_command")]),e._v(" accepts a dictionary whose keys are the names of valid\nparameters for said command:")]),e._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[e._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("run_command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Tempus"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Irreparabile"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Fugit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("p",[e._v("All user-provided arguments to commands must JSON-serializable.\nThis includes strings, integers, floats, booleans, "),a("code",[e._v("None")]),e._v(",\nand the recursive list and dict types.\nMapping keys must be strings.")]),e._v(" "),a("h2",{attrs:{id:"text-commands-and-the-edit-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-commands-and-the-edit-object"}},[e._v("#")]),e._v(" Text Commands and the "),a("code",[e._v("edit")]),e._v(" Object")]),e._v(" "),a("p",[e._v("Text commands receive an "),a("code",[e._v("edit")]),e._v(" object passed to them by Sublime Text.")]),e._v(" "),a("p",[e._v("All actions done within an "),a("code",[e._v("edit")]),e._v(" are grouped as a single undo action.\nCallbacks such as "),a("code",[e._v("on_modified()")]),e._v(" and "),a("code",[e._v("on_selection_modified()")]),e._v(" are called\nwhen the most outer edit operation is finished.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("edit")]),e._v(" object's life time is solely managed by Sublime Text internally.\nPlugin authors must ensure\nto perform all editing operations\nwithin the "),a("code",[e._v("run()")]),e._v(" method of text commands\nso that macros and repeating commands work as expected.")]),e._v(" "),a("h2",{attrs:{id:"responding-to-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#responding-to-events"}},[e._v("#")]),e._v(" Responding to Events")]),e._v(" "),a("p",[e._v("Any subclass of "),a("code",[e._v("EventListener")]),e._v(" will be able to respond to events. You cannot\nmake a class derive both from "),a("code",[e._v("EventListener")]),e._v(" and from any other type of\ncommand.")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("Expensive operations in event listeners can cause Sublime Text to become\nunresponsive, especially in events triggered frequently, like\n"),a("code",[e._v("on_modified()")]),e._v(" and "),a("code",[e._v("on_selection_modified()")]),e._v(". Be careful of how much\nwork is done in these and don't implement events you don't need, even if\nthey just "),a("code",[e._v("pass")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"sublime-text-and-the-python-standard-library"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sublime-text-and-the-python-standard-library"}},[e._v("#")]),e._v(" Sublime Text and the Python Standard Library")]),e._v(" "),a("p",[e._v("The most significant omission from the default distribution\nis the "),a("code",[e._v("tkinter")]),e._v(" module.\nOtherwise, you can access the entire Python standard library\nfor the Python version Sublime Text ships with.")]),e._v(" "),a("h2",{attrs:{id:"automatic-plugin-reload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#automatic-plugin-reload"}},[e._v("#")]),e._v(" Automatic Plugin Reload")]),e._v(" "),a("p",[e._v("Sublime Text will reload topmost Python modules as they change (perhaps\nbecause you are editing a "),a("em",[e._v(".py")]),e._v(" file within "),a("em",[e._v("Packages")]),e._v("). By contrast, Python\nsubpackages won't be reloaded automatically, and this can lead to confusion\nwhile you're developing plugins. Generally speaking, it's best to restart\nSublime Text after you've made changes to plugin files, so all changes can take\neffect.")])])}),[],!1,null,null,null);t.default=s.exports}}]);