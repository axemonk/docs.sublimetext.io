(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{503:function(t,a,s){"use strict";s.r(a);var n=s(18),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("In Sublime Text 3.0 (Build 3084),\na new syntax definition format has been added,\nwith the "),s("code",[t._v(".sublime-syntax")]),t._v(" extension.")]),t._v(" "),s("p",[t._v("It is highly encouraged to be used\nin favor of the legacy format\ndescribed in this document,\nunless compatibility with older versions\nor other editors using this format is desired.")]),t._v(" "),s("p",[t._v("See the "),s("a",{attrs:{href:"https://www.sublimetext.com/docs/syntax.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("official documentation"),s("OutboundLink")],1),t._v(" for details.")]),t._v(" "),s("p",[t._v("This document describes\nthe old "),s("code",[t._v(".tmLanguage")]),t._v(" format\ninherited from TextMate.")])]),t._v(" "),s("h2",{attrs:{id:"file-format"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-format"}},[t._v("#")]),t._v(" File Format")]),t._v(" "),s("p",[t._v("TextMate syntax definitions are Plist files with the "),s("code",[t._v(".tmLanguage")]),t._v(" extension.\nHowever, for convenience in this reference document, YAML is shown instead.")]),t._v(" "),s("p",[t._v("Additionally, Sublime Text also understands the "),s("code",[t._v(".hidden-tmLanguage")]),t._v(' extension,\nwhich can not be selected by the user but only by set by plugins.\n"Find in Files" makes use of this.\nThe downsite is that these can not be included by\nimport statements in other language definitions.')]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("---")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Sublime Snippet (Raw)\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scopeName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" source.ssraw\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("fileTypes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uuid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0da65be4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("5aac"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("4b6f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("8071"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("1aadb970b8d9\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("patterns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("comment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Tab stops like $1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.ssraw\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\$\\d+\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("comment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Variables like $PARAM1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $TM_SELECTION"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.ssraw\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\$("),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Za"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("z"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("A"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Za"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("z0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("9_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("+)\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("captures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.numeric.ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" variable.complex.ssraw\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(\\$)(\\{)([0-9]+):'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("beginCaptures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.numeric.ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("patterns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $self\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" support.other.ssraw\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.character.escape.ssraw\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$<"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" invalid.illegal.ssraw\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[$<>]'")]),t._v("\n")])])]),s("dl",[s("dt",[s("code",[t._v("name")])]),t._v(" "),s("dd",[s("p",[t._v("Descriptive name for the syntax definition.\nShows up in the syntax definition dropdown menu located in the bottom right of\nthe Sublime Text interface.\nIt's usually the name of the programming language or equivalent.")])]),t._v(" "),s("dt",[s("code",[t._v("scopeName")])]),t._v(" "),s("dd",[s("p",[t._v("Name of the topmost scope for this syntax definition.\nEither "),s("code",[t._v("source.<lang>")]),t._v(" or "),s("code",[t._v("text.<lang>")]),t._v(".\nUse "),s("code",[t._v("source")]),t._v(" for programming languages and "),s("code",[t._v("text")]),t._v(" for markup and everything else.")])]),t._v(" "),s("dt",[s("code",[t._v("fileTypes")])]),t._v(" "),s("dd",[s("p",[t._v("This is a list of file extensions (without the leading dot).\nWhen opening files of these types,\nSublime Text will automatically activate this syntax definition for them.\nOptional.")])]),t._v(" "),s("dt",[s("code",[t._v("uuid")])]),t._v(" "),s("dd",[s("p",[t._v("Unique indentifier for this syntax definition. Currently ignored.")])]),t._v(" "),s("dt",[s("code",[t._v("patterns")])]),t._v(" "),s("dd",[s("p",[t._v("Array of "),s("a",{attrs:{href:"#patterns-array"}},[t._v("patterns")]),t._v(" to match against the buffer's text.")])]),t._v(" "),s("dt",[s("code",[t._v("repository")])]),t._v(" "),s("dd",[s("p",[t._v("Array of patterns abstracted out from the "),s("code",[t._v("patterns")]),t._v(" element.\nUseful to keep the syntax definition tidy as well as for\nspecialized uses like recursive patterns or re-using the same pattern.\nOptional.")])])]),t._v(" "),s("h2",{attrs:{id:"patterns-array"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#patterns-array"}},[t._v("#")]),t._v(" Patterns Array")]),t._v(" "),s("p",[t._v("A pattern is a mapping in one of the following formats:")]),t._v(" "),s("dl",[s("dt",[s("strong",[t._v("match")])]),t._v(" "),s("dd",[s("p",[t._v("Contains the following elements:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Element")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("match")])]),t._v(" "),s("td",[t._v("Pattern to search for.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("name")])]),t._v(" "),s("td",[t._v("Optional. Scope name to be assigned to matches of "),s("code",[t._v("match")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("comment")])]),t._v(" "),s("td",[t._v("Optional. For information only.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("captures")])]),t._v(" "),s("td",[t._v("Optional. Refinement of "),s("code",[t._v("match")]),t._v(". See below.")])])])]),t._v(" "),s("p",[t._v("In turn, "),s("code",[t._v("captures")]),t._v(" can contain "),s("em",[t._v("n")]),t._v(" of the following pairs of elements\n(note that "),s("code",[t._v("0")]),t._v(" refers to the whole match):")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Capture")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("0")]),t._v(".."),s("code",[t._v("n")])]),t._v(" "),s("td",[t._v("Name of the group referenced. Must be a string.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("name")])]),t._v(" "),s("td",[t._v("Scope to be assigned to the group.")])])])]),t._v(" "),s("p",[s("em",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Simple")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("comment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Sequences like \\$"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" and \\<\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.character.escape.ssraw\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\\\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$<"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# With captures")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("comment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Tab stops like $1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.ssraw\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\$(\\d+)\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("captures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.numeric.ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("dt",[s("strong",[t._v("include")])]),t._v(" "),s("dd",[s("p",[t._v("Includes an item from the repository, another syntax definitions or the current\none.")]),t._v(" "),s("p",[t._v("References:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Include")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("$self")]),t._v(" "),s("td",[t._v("The current syntax definition.")])]),t._v(" "),s("tr",[s("td",[t._v("#itemName")]),t._v(" "),s("td",[t._v("itemName in the repository.")])]),t._v(" "),s("tr",[s("td",[t._v("source.js")]),t._v(" "),s("td",[t._v("External syntax definitions.")])])])]),t._v(" "),s("p",[s("em",[t._v("Examples:")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Requires presence of DoubleQuotedStrings element in the repository.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#DoubleQuotedStrings'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Recursively includes the complete current syntax definition.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $self\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Includes and external syntax definition.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" source.js\n")])])])]),t._v(" "),s("dt",[s("strong",[t._v("begin..end")])]),t._v(" "),s("dd",[s("p",[t._v("Defines a scope potentially spanning multiple lines.\nContains the following elements (only "),s("code",[t._v("begin")]),t._v(" and "),s("code",[t._v("end")]),t._v(" are required):")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Scope")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("name")])]),t._v(" "),s("td",[t._v("Scope name for the content including the markers.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("contentName")])]),t._v(" "),s("td",[t._v("Scope name for the content excluding the markers.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("begin")])]),t._v(" "),s("td",[t._v("The start marker pattern.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("end")])]),t._v(" "),s("td",[t._v("The end marker pattern.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("name")])]),t._v(" "),s("td",[t._v("Scope name for the whole region.")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("beginCaptures")])]),t._v(" "),s("td",[s("code",[t._v("captures")]),t._v(" for "),s("code",[t._v("begin")]),t._v(". See "),s("code",[t._v("captures")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("endCaptures")])]),t._v(" "),s("td",[s("code",[t._v("captures")]),t._v(" for "),s("code",[t._v("end")]),t._v(". See "),s("code",[t._v("captures")]),t._v(".")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("patterns")])]),t._v(" "),s("td",[t._v("Array of patterns to be matched against the content.")])])])]),t._v(" "),s("p",[s("em",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" variable.complex.ssraw\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'(\\$)(\\{)([0-9]+):'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("beginCaptures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.numeric.ssraw"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("patterns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $self\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" support.other.ssraw\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"repository"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[t._v("#")]),t._v(" Repository")]),t._v(" "),s("p",[t._v("A repository defines items\nthat can be referenced from "),s("a",{attrs:{href:"#patterns-array"}},[t._v("a patterns array")]),t._v("\n(global or within a "),s("em",[t._v("begin..end")]),t._v(" pattern) via an "),s("code",[t._v("include")]),t._v(" pattern.")]),t._v(" "),s("p",[t._v("A repository item may be a single pattern\nor an array of patterns.")]),t._v(" "),s("p",[s("em",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("repository")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("numericConstant")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("patterns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.numeric.double.powershell\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\d"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*(?<")]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v("\\.)(\\.)\\d+(d)"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("(mb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("kb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("gb)"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("captures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" support.constant.powershell"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" support.constant.powershell"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'3'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.powershell"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" constant.numeric.powershell\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ("),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("<"),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v("\\w)\\d+(d)"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("(mb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("kb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("gb)"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),t._v("("),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token tag"}},[t._v("!")]),t._v("\\w)\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("captures")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" support.constant.powershell"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("'2'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" keyword.other.powershell"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("scriptblock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" meta.scriptblock.powershell\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("end")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \\"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("patterns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" $self\n")])])]),s("h2",{attrs:{id:"escape-sequences"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#escape-sequences"}},[t._v("#")]),t._v(" Escape Sequences")]),t._v(" "),s("p",[t._v("Be sure to escape JSON/XML sequences as needed.")]),t._v(" "),s("p",[t._v("For YAML, additionally make sure that you didn't unintentionally start a new\nscalar by not using quotes for your strings.\nExamples that "),s("strong",[t._v("won't work")]),t._v(" as expected:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("aeiou"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#this-is-actually-a-comment")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' "'),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#"\\w+"" # contains double quotation marks')]),t._v("\n")])])]),s("p",[t._v("Use single quotes in these situations:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[aeiou]'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#this-is-actually-a-comment'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#\"\\w+'")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);