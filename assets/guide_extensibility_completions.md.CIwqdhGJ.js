import{_ as a,E as n,c as l,m as e,a as t,J as i,a4 as s,o as r}from"./chunks/framework.DTvtauHd.js";const c="/assets/completions_hint.C4BtHFfV.png",p="/assets/completions_contents.D7lWr3jh.gif",$=JSON.parse('{"title":"Completions","description":"","frontmatter":{"title":"Completions"},"headers":[],"relativePath":"guide/extensibility/completions.md","filePath":"guide/extensibility/completions.md","lastUpdated":1724867625000}'),h={name:"guide/extensibility/completions.md"},d=e("h1",{id:"completions",tabindex:"-1"},[t("Completions "),e("a",{class:"header-anchor",href:"#completions","aria-label":'Permalink to "Completions"'},"​")],-1),m=e("p",null,"In the spirit of IDEs, Sublime Text suggests completions that aggregate code or content while writing by catching everything that you have written, like variable names.",-1),u=e("p",null,"There are however several ways to extend the list of completions (for example, depending on the current syntax).",-1),f=e("p",null,"This topic deals with how completions are used and where they come from.",-1),g=e("h2",{id:"how-to-use-completions",tabindex:"-1"},[t("How to Use Completions "),e("a",{class:"header-anchor",href:"#how-to-use-completions","aria-label":'Permalink to "How to Use Completions"'},"​")],-1),_=e("p",null,"There are two methods for using completions. Even though, when screening them, the priority given to completions always stays the same, the two methods produce different results.",-1),b=e("p",null,"Completions can be inserted in two ways:",-1),y=e("h3",{id:"the-completions-list",tabindex:"-1"},[t("The Completions List "),e("a",{class:"header-anchor",href:"#the-completions-list","aria-label":'Permalink to "The Completions List"'},"​")],-1),w=e("p",null,"To use the completions list:",-1),x=e("em",null,"up",-1),k=e("em",null,"down",-1),T=e("code",null,"auto_complete_commit_on_tab",-1),C=s('<div class="tip custom-block"><p class="custom-block-title">Note</p><p>If the completions list was opened explicitly, the current selection in the completions list can also be validated with any punctuation sign that isn&#39;t itself bound to a snippet (e.g. <code>.</code>).</p></div><p>When the list of completion candidates can be narrowed down to one unambiguous choice given the current prefix, this one completion will be validated automatically the moment you trigger the completion list.</p><h4 id="hints" tabindex="-1">Hints <a class="header-anchor" href="#hints" aria-label="Permalink to &quot;Hints&quot;">​</a></h4><p>Additionally, you may see a trigger hint on the right side of a completion&#39;s trigger in the completions list. This can be used as a preview of the completion&#39;s content.</p><p><img src="'+c+'" alt="image"></p><p>The above is in fact a snippet and expands to <code>$arrayName = array(&#39;&#39; =&gt; , );</code>.</p><h3 id="triggers-and-contents" tabindex="-1">Triggers and Contents <a class="header-anchor" href="#triggers-and-contents" aria-label="Permalink to &quot;Triggers and Contents&quot;">​</a></h3><p>Completions not sourced from the text in the current file may provide a trigger that is different to the content they will insert if selected. This is commonly used for function completions where the content also includes the function&#39;s signature.</p><p>For example, completing <code>array_map</code> from the PHP completions will result in <code>array_map({callback}, {arr1})</code>:</p><p><img src="'+p+`" alt="image"></p><p>You may notice in the animation that the cursor automatically selected <code>callback</code>. This is because completions support the same features as snippets with fields and placeholders. For more details, refer to <a href="./snippets.html#snippet-features">Snippet Features</a>.</p><h3 id="completions-with-multiple-cursors" tabindex="-1">Completions with multiple cursors <a class="header-anchor" href="#completions-with-multiple-cursors" aria-label="Permalink to &quot;Completions with multiple cursors&quot;">​</a></h3><p>Sublime Text can also handle completions with multiple cursors but will only open the completion list when all cursors share the same text between the current cursor positions and the last word separator character (e.g. <code>.</code> or a line break).</p><p>Working example (<code>|</code> represents one cursor):</p><pre><code>l|
some text with l|
l| and.l|
</code></pre><p>Not working example:</p><pre><code>l|
some text with la|
l| andl|
</code></pre><p>Selections are essentially ignored, only the position of the cursor matters. Thus, <code>e|[-some selection] example</code>, with <code>|</code> as the cursor and <code>[...]</code> as the current selection, completes to <code>example|[-some selection] example</code>.</p>`,18),v={id:"completed-completions",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#completed-completions","aria-label":'Permalink to "<Key k="tab" />-Completed Completions"'},"​",-1),S=e("p",null,[t("If you want to be able to tab-complete completions, the setting "),e("code",null,"tab_completion"),t(" must be set to "),e("code",null,"true"),t(" (default). Snippet tab-completion is unaffected by this setting: They will always be completed according to their tab trigger.")],-1),q=e("code",null,"tab_completion",-1),I=e("h4",{id:"inserting-a-literal-tab-character",tabindex:"-1"},[t("Inserting a Literal tab Character "),e("a",{class:"header-anchor",href:"#inserting-a-literal-tab-character","aria-label":'Permalink to "Inserting a Literal tab Character"'},"​")],-1),A=e("code",null,"tab_completion",-1),N=s('<h2 id="sources-for-completions-and-their-priorities" tabindex="-1">Sources for Completions and their Priorities <a class="header-anchor" href="#sources-for-completions-and-their-priorities" aria-label="Permalink to &quot;Sources for Completions and their Priorities&quot;">​</a></h2><p>These are the sources for completions the user can control, in the order they are prioritized:</p><ol><li><a href="./snippets.html">Snippets</a></li><li>API-injected completions via <code>on_query_completions</code></li><li><a href="/reference/completions.html">Completions files</a></li></ol><p>Additionally, the following completions are folded into the final list:</p><ol start="4"><li>Words in the buffer</li></ol><p>Snippets will always win when the current prefix matches their tab trigger <em>exactly</em>. For the rest of the completion sources, a fuzzy match is performed. Furthermore, snippets always lose in a fuzzy match.</p><p>When a list of completions is shown, snippets will still be listed alongside the other items, even if the prefix only partially matches the snippets&#39; tab triggers.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Completions sourced from words in the buffer can be suppressed explicitly from an <code>on_query_completions</code> event hook.</p></div><h2 id="auto-completion-triggers-and-selector" tabindex="-1">Auto Completion Triggers and Selector <a class="header-anchor" href="#auto-completion-triggers-and-selector" aria-label="Permalink to &quot;Auto Completion Triggers and Selector&quot;">​</a></h2><p>Sublime Text provides two settings for users and package authors to tweak their auto completion behavior. Both settings work independently of each other and either of them can trigger the auto-completion popup.</p><ul><li><p><code>auto_complete_selector</code> expects a scope selector that when matched causes the auto-completion popup to open for any non-punctuation character, i.e. for identifiers. The default configuration disables this for syntaxes with a focus on plain text, comments and strings.</p><p>Before 4070, the selector was applied to the position <em>after</em> the just-typed character.</p></li><li><p><code>auto_complete_triggers</code> expects a list of mappings that may specify <code>characters</code> that should trigger the auto-completion popup and/or a scope <code>selector</code>. If both are provided, both are required to match.</p><p>Additionally, a <code>rhs_empty</code> boolean may be provided that states whether the right-hand side of the caret must be empty or a whitespace character. It defaults to <code>false</code>.</p></li></ul><p>Package authors may be interested in configuring triggers and/or the selector in a syntax-specific settings file.</p>',12);function V(W,B,E,F,H,z){const o=n("Key");return r(),l("div",null,[d,m,u,f,g,_,b,e("ul",null,[e("li",null,[t("through the completions list ("),i(o,{k:"ctrl+space"}),t("), or")]),e("li",null,[t("by pressing "),i(o,{k:"tab"}),t(".")])]),y,w,e("ol",null,[e("li",null,[t("Press "),i(o,{k:"ctrl+space"}),t(" or just type something.")]),e("li",null,[t("Optionally, press "),i(o,{k:"ctrl+space"}),t(" again to select the next entry or use "),x,t(" and "),k,t(" arrow keys.")]),e("li",null,[t("Press "),i(o,{k:"enter"}),t(" or "),i(o,{k:"tab"}),t(" to validate selection (depending on the "),T,t(" setting).")]),e("li",null,[t("Optionally, press "),i(o,{k:"tab"}),t(" repeatedly to insert the next available completion.")])]),C,e("h3",v,[i(o,{k:"tab"}),t("-Completed Completions "),P]),S,e("p",null,[t("With "),q,t(" enabled, completion of items is always automatic. This means, unlike the case of the completions list, that Sublime Text will always make the decision for you. The rules for selecting the best completion are the same as described above, but in case of ambiguity, Sublime Text will insert the item it deems most suitable. You can press the "),i(o,{k:"tab"}),t(" key multiple times to walk through other available options.")]),I,e("p",null,[t("When "),A,t(" is enabled, you can press "),i(o,{k:"shift+tab"}),t(" to insert a literal tab character.")]),N])}const j=a(h,[["render",V]]);export{$ as __pageData,j as default};
