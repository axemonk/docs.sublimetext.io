import{_ as t,C as l,o as p,c as r,k as o,a as s,H as n,Q as e}from"./chunks/framework.7cebd429.js";const B=JSON.parse('{"title":"Key Bindings","description":"","frontmatter":{"title":"Key Bindings"},"headers":[],"relativePath":"guide/customization/key_bindings.md","filePath":"guide/customization/key_bindings.md","lastUpdated":1698610674000}'),c={name:"guide/customization/key_bindings.md"},i=e(`<h1 id="key-bindings" tabindex="-1">Key Bindings <a class="header-anchor" href="#key-bindings" aria-label="Permalink to &quot;Key Bindings&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">See Also</p><p><a href="/reference/key_bindings.html">Reference for key bindings</a> : Complete documentation on key bindings.</p></div><p>Key bindings let you map sequences of key presses to commands.</p><h2 id="file-format" tabindex="-1">File Format <a class="header-anchor" href="#file-format" aria-label="Permalink to &quot;File Format&quot;">​</a></h2><p>Key bindings are defined in JSON and stored in <code>.sublime-keymap</code> files.</p><p>In the same package, separate keymap files for Linux, OSX and Windows may exist for better OS integration.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span></span>
<span class="line"><span style="color:#E1E4E8;">   { </span><span style="color:#79B8FF;">&quot;keys&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;ctrl+shift+n&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;new_window&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">   { </span><span style="color:#79B8FF;">&quot;keys&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;ctrl+o&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;prompt_open_file&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span></span>
<span class="line"><span style="color:#24292E;">   { </span><span style="color:#005CC5;">&quot;keys&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ctrl+shift+n&quot;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;new_window&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">   { </span><span style="color:#005CC5;">&quot;keys&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ctrl+o&quot;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;prompt_open_file&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre></div><h2 id="defining-and-overriding-key-bindings" tabindex="-1">Defining and Overriding Key Bindings <a class="header-anchor" href="#defining-and-overriding-key-bindings" aria-label="Permalink to &quot;Defining and Overriding Key Bindings&quot;">​</a></h2><p>Sublime Text ships with default key bindings (for example, <code>Packages/Default/Default (Windows).sublime-keymap)</code>. In order to override default key bindings or add new ones, use a separate keymap file with higher precedence: for example, <code>Packages/User/Default (Windows).sublime-keymap</code>.</p><h2 id="advanced-key-bindings" tabindex="-1">Advanced Key Bindings <a class="header-anchor" href="#advanced-key-bindings" aria-label="Permalink to &quot;Advanced Key Bindings&quot;">​</a></h2><p>Simple key bindings consist of a sequence of one or more keys mapped to a command. However, there are more complex syntaxes for passing arguments to commands and restricting key bindings to specific contexts.</p><h3 id="passing-arguments" tabindex="-1">Passing Arguments <a class="header-anchor" href="#passing-arguments" aria-label="Permalink to &quot;Passing Arguments&quot;">​</a></h3><p>Use the <code>args</code> key to specify arguments:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">&quot;keys&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;shift+enter&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;insert&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;args&quot;</span><span style="color:#E1E4E8;">: {</span><span style="color:#79B8FF;">&quot;characters&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">} }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#005CC5;">&quot;keys&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;shift+enter&quot;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;insert&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;args&quot;</span><span style="color:#24292E;">: {</span><span style="color:#005CC5;">&quot;characters&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">} }</span></span></code></pre></div>`,15),y=o("code",null,"\\n",-1),d=o("code",null,"insert",-1),u=e(`<h3 id="contexts" tabindex="-1">Contexts <a class="header-anchor" href="#contexts" aria-label="Permalink to &quot;Contexts&quot;">​</a></h3><p>Contexts determine whether a given key binding is enabled based on the caret&#39;s position or some other state.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">&quot;keys&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;escape&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;clear_fields&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;context&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">   [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { </span><span style="color:#79B8FF;">&quot;key&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;has_next_field&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;operator&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;equal&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">&quot;operand&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">   ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#005CC5;">&quot;keys&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;escape&quot;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;clear_fields&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;context&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">   [</span></span>
<span class="line"><span style="color:#24292E;">      { </span><span style="color:#005CC5;">&quot;key&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;has_next_field&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;operator&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;equal&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">&quot;operand&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">   ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,3),E=o("em",null,"clear snippet fields and resume normal editing if there is a next snippet field available",-1),q=e('<p>The same key binding may be mapped to multiple contexts, so a single sequence of key presses may produce different results at different times.</p><h3 id="key-chords" tabindex="-1">Key Chords <a class="header-anchor" href="#key-chords" aria-label="Permalink to &quot;Key Chords&quot;">​</a></h3><p>You can create key bindings composed of multiple keys.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#79B8FF;">&quot;keys&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;ctrl+k&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;ctrl+v&quot;</span><span style="color:#E1E4E8;">], </span><span style="color:#79B8FF;">&quot;command&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;paste_from_history&quot;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#005CC5;">&quot;keys&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;ctrl+k&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;ctrl+v&quot;</span><span style="color:#24292E;">], </span><span style="color:#005CC5;">&quot;command&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;paste_from_history&quot;</span><span style="color:#24292E;"> }</span></span></code></pre></div>',4),h=o("code",null,"paste_from_history",-1),m=o("p",null,"Note: This example is a default key binding, so you can try it out for yourself.",-1);function g(k,_,F,f,C,b){const a=l("Key");return p(),r("div",null,[i,o("p",null,[s("Here, "),y,s(" is passed to the "),d,s(" command whenever "),n(a,{k:"shift+enter"}),s(" is pressed.")]),u,o("p",null,[s("This key binding translates to "),E,s(". Thus, pressing "),n(a,{k:"escape"}),s(" will only trigger this key binding if you are cycling through snippet fields.")]),q,o("p",null,[s("Here, to trigger the command "),h,s(", you have to press "),n(a,{k:"ctrl+k"}),s(" first, then release "),n(a,{k:"k"}),s(", and finally press "),n(a,{k:"v"}),s(".")]),m])}const x=t(c,[["render",g]]);export{B as __pageData,x as default};
