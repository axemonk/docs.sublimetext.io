import{_ as a,c as n,o,a2 as e}from"./chunks/framework.CwCSXIY0.js";const y=JSON.parse('{"title":"Commands","description":"","frontmatter":{"title":"Commands"},"headers":[],"relativePath":"guide/extensibility/commands.md","filePath":"guide/extensibility/commands.md","lastUpdated":1738694335000}'),l={name:"guide/extensibility/commands.md"};function t(p,s,c,r,m,i){return o(),n("div",null,s[0]||(s[0]=[e(`<h1 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h1><p>Commands are ubiquitous in Sublime Text: key bindings, menu items and macros all work through the command system. They are found in other places too.</p><p>Some commands are implemented in the editor&#39;s core, but many of them are provided as Python plugins. Every command can be called from a Python plugin.</p><h2 id="command-dispatching" tabindex="-1">Command Dispatching <a class="header-anchor" href="#command-dispatching" aria-label="Permalink to &quot;Command Dispatching&quot;">​</a></h2><p>Normally, commands are bound to the application object, a window object or a view object. Window objects, however, will dispatch commands based on input focus, so you can issue a view command from a window object and the correct view instance will be found for you.</p><h2 id="anatomy-of-a-command" tabindex="-1">Anatomy of a Command <a class="header-anchor" href="#anatomy-of-a-command" aria-label="Permalink to &quot;Anatomy of a Command&quot;">​</a></h2><p>Commands have a name separated by underscores (snake_case) like <code>hot_exit</code>, and can take a dictionary of arguments whose keys must be strings and whose values must be JSON types. Here are a few examples of commands run from the Python console:</p><div class="language-py line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run_command</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">goto_line</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">line</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#BABED8;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run_command</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">insert_snippet</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">contents</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">&lt;$SELECTION&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#BABED8;">view</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">window</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">run_command</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prompt_select_project</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="from-command-line-cli" tabindex="-1">From command line (CLI) <a class="header-anchor" href="#from-command-line-cli" aria-label="Permalink to &quot;From command line (CLI)&quot;">​</a></h2><p>Commands may be passed to Sublime Text directly from the command line of the operating system. Usage:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">subl</span><span style="color:#C3E88D;"> --command</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">show_overlay {&quot;overlay&quot;: &quot;command_palette&quot;, &quot;text&quot;: &quot;hello&quot;}</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># on Windows:</span></span>
<span class="line"><span style="color:#FFCB6B;">sublime-text.exe</span><span style="color:#C3E88D;"> --command</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">show_overlay {</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">overlay</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">: </span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">command_palette</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">, </span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">: </span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#BABED8;">\\&quot;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="info custom-block"><p class="custom-block-title">See Also</p><p><a href="/reference/commands.html">Reference for commands</a></p></div>`,12)]))}const D=a(l,[["render",t]]);export{y as __pageData,D as default};
