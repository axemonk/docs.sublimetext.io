import{_ as e,c as t,o as s,a4 as i}from"./chunks/framework.e0tDGBa7.js";const m=JSON.parse('{"title":"Settings","description":"","frontmatter":{"title":"Settings"},"headers":[],"relativePath":"guide/customization/settings.md","filePath":"guide/customization/settings.md","lastUpdated":1708975850000}'),o={name:"guide/customization/settings.md"},a=i('<h1 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;Settings&quot;">​</a></h1><p>Sublime Text stores configuration data in <code>.sublime-settings</code> files. Flexibility comes at the price of a slightly complex system for applying settings. However, here&#39;s a rule of thumb:</p><p>Always place your personal settings files under <code>Packages/User</code> to guarantee they will take precedence over any other conflicting settings files.</p><p>With that out of the way, let&#39;s unveil, to please masochistic readers, the mysteries of how settings work.</p><h2 id="format" tabindex="-1">Format <a class="header-anchor" href="#format" aria-label="Permalink to &quot;Format&quot;">​</a></h2><p>Settings files use JSON and have the <code>.sublime-settings</code> extension.</p><h2 id="types-of-settings" tabindex="-1">Types of Settings <a class="header-anchor" href="#types-of-settings" aria-label="Permalink to &quot;Types of Settings&quot;">​</a></h2><p>The name of each <code>.sublime-settings</code> file determines its purpose. Names can be descriptive (like <code>Preferences (Windows).sublime-settings</code> or <code>Minimap.sublime-settings</code>), or they can be related to what the settings file is controlling. For example, file type settings need to carry the name of the <code>.tmLanguage</code> syntax definition for the file type. Thus, for the <code>.py</code> file type, whose syntax definition is contained in <code>Python.tmLanguage</code>, the corresponding settings files would be called <code>Python.sublime-settings</code>.</p><p>Also, some settings files only apply to specific platforms. This can be inferred from the file names, e.g. <code>Preferences ({platform}).sublime-settings</code>. Valid names for <em>platform</em> are <code>Windows</code>, <code>Linux</code>, <code>OSX</code>.</p><p>This is <strong>important</strong>: Platform-specific settings files in the <code>Packages/User</code> folder are ignored. This way, you can be sure a single settings file overrides all the others.</p><p>Settings changes are usually updated in real time, but you may have to restart Sublime Text in order to load <em>new</em> settings files.</p><h2 id="how-to-access-and-edit-common-settings-files" tabindex="-1">How to Access and Edit Common Settings Files <a class="header-anchor" href="#how-to-access-and-edit-common-settings-files" aria-label="Permalink to &quot;How to Access and Edit Common Settings Files&quot;">​</a></h2><p>Unless you need very fine-grained control over settings, you can access the main configuration files through the <strong>Preferences | Settings - User</strong> and <strong>Preferences | Settings - More</strong> menu items. Editing <strong>Preferences | Settings - Default</strong> is discouraged, because changes will be reverted with every update to the software. However, you can use that file for reference: it contains comments explaining the purpose of all available global and file type settings.</p><h2 id="order-of-precedence-of-sublime-settings-files" tabindex="-1">Order of Precedence of <code>.sublime-settings</code> Files <a class="header-anchor" href="#order-of-precedence-of-sublime-settings-files" aria-label="Permalink to &quot;Order of Precedence of `.sublime-settings` Files&quot;">​</a></h2><p>The same settings file (such as <code>Python.sublime-settings</code>) can appear in multiple places. All settings defined in identically named files will be merged together and overwritten according to predefined rules. See <code>merging-and-order-of-precedence</code> for more information.</p><p>Let us remember again that any given settings file in <code>Packages/User</code> ultimately overrides every other settings file of the same name.</p><p>In addition to settings files, Sublime Text maintains <em>session</em> data, which is configuration for the particular set of files being currently edited. Session data is updated as you work on files, so if you adjust settings for a particular file in any way (mainly through API calls), they will be recorded in the session and will take precedence over any applicable <code>.sublime-settings</code> files.</p><p>To check the value of a setting for a particular file being edited, use <code>view.settings().get(&quot;setting_name&quot;)</code> from the console.</p><p>Finally, it&#39;s also worth noting that some settings may be automatically adjusted for you. Keep this in mind if you&#39;re puzzled about some setting&#39;s value. For instance, this is the case for certain whitespace-related settings and the <code>syntax</code> setting.</p><p>Below, you can see the order in which Sublime Text would process a hypothetical hierarchy of settings for Python files on Windows:</p><ul><li><em>Packages/Default/Preferences.sublime-settings</em></li><li><em>Packages/Default/Preferences (Windows).sublime-settings</em></li><li><em>Packages/User/Preferences.sublime-settings</em></li><li><em>Packages/Python/Python.sublime-settings</em></li><li><em>Packages/User/Python.sublime-settings</em></li><li>Session data for the current file</li><li>Auto adjusted settings</li></ul><p>This list is not exhaustive. See <a href="#the-settings-hierarchy">The Settings Hierarchy</a> for a full example of the order of precedence.</p><h2 id="global-editor-settings-and-global-file-settings" tabindex="-1">Global Editor Settings and Global File Settings <a class="header-anchor" href="#global-editor-settings-and-global-file-settings" aria-label="Permalink to &quot;Global Editor Settings and Global File Settings&quot;">​</a></h2><p>These settings are stored in <code>Preferences.sublime-settings</code> and <code>Preferences ({platform}).sublime-settings</code> files. The defaults can be found in <code>Packages/Default</code>.</p><p>Valid names for <em>platform</em> are <code>Windows</code>, <code>Linux</code>, <code>OSX</code>.</p><h2 id="file-type-settings" tabindex="-1">File Type Settings <a class="header-anchor" href="#file-type-settings" aria-label="Permalink to &quot;File Type Settings&quot;">​</a></h2><p>If you want to target a specific file type, name the <code>.sublime-settings</code> file after the file type&#39;s syntax definition. For example, if our syntax definition +was called <code>Python.tmLanguage</code>, we&#39;d need to call our settings file <code>Python.sublime-settings</code>.</p><p>Settings files for specific file types usually live in packages, like +<code>Packages/Python</code>, but there can be multiple settings files in separate locations for the same file type.</p><p>Similarly to global settings, one can establish platform-specific settings for file types. For example, <code>Python (Linux).sublime-settings</code> would only be consulted under Linux.</p><p>Also, let us emphasize that under <code>Packages/User</code> only <code>Python.sublime-settings</code> would be read, but not any <code>Python ({platform}).sublime-settings</code> variant.</p><p>Regardless of its location, any file-type-specific settings file has precedence over a global settings file affecting file types.</p><h2 id="the-settings-hierarchy" tabindex="-1">The Settings Hierarchy <a class="header-anchor" href="#the-settings-hierarchy" aria-label="Permalink to &quot;The Settings Hierarchy&quot;">​</a></h2><p>Below, you can see the <strong>exhaustive</strong> settings sources that Sublime Text would process for <em>Python</em> files on <em>Windows</em>. As always, later specifications override earlier ones.</p><ul><li>Global settings <ul><li><code>Packages/Default/Preferences.sublime-settings</code></li><li><code>Packages/Default/Preferences (Windows).sublime-settings</code></li><li><code>Packages/AnyOtherPackage/Preferences.sublime-settings</code></li><li><code>Packages/AnyOtherPackage/Preferences (Windows).sublime-settings</code></li><li><code>Packages/User/Preferences.sublime-settings</code></li></ul></li><li>Settings from the current project</li><li>Syntax-specific settings <ul><li><code>Packages/Python/Python.sublime-settings</code></li><li><code>Packages/Python/Python (Windows).sublime-settings</code></li><li><code>Packages/User/Python.sublime-settings</code></li></ul></li><li>Session data for the current file (View-specific settings)</li><li>Auto-adjusted settings</li></ul><p>Note that settings files may also appear in package subdirectories, which have been excluded for brevity.</p><h2 id="where-to-store-user-settings-once-again" tabindex="-1">Where to Store User Settings (Once Again) <a class="header-anchor" href="#where-to-store-user-settings-once-again" aria-label="Permalink to &quot;Where to Store User Settings (Once Again)&quot;">​</a></h2><p>Whenever you want to save settings, especially if they should be preserved between software updates, place the corresponding <code>.sublime-settings</code> file in <code>Packages/User</code>.</p>',37),n=[a];function l(r,c,d,g,h,f){return s(),t("div",null,n)}const p=e(o,[["render",l]]);export{m as __pageData,p as default};
