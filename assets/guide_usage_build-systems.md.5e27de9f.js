import{_ as l,C as n,o as p,c as r,k as e,a as s,H as a,Q as t}from"./chunks/framework.7cebd429.js";const F=JSON.parse('{"title":"Build Systems","description":"","frontmatter":{"title":"Build Systems"},"headers":[],"relativePath":"guide/usage/build-systems.md","filePath":"guide/usage/build-systems.md","lastUpdated":1698615133000}'),c={name:"guide/usage/build-systems.md"},i=t(`<h1 id="build-systems" tabindex="-1">Build Systems <a class="header-anchor" href="#build-systems" aria-label="Permalink to &quot;Build Systems&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">Notice</p><p>This page describes the old behavior of build systems. While it is still generally correct, refer to the official documentation for the up to date version. We are working on this.</p><p><a href="https://www.sublimetext.com/docs/build_systems.html" target="_blank" rel="noreferrer">Offical Documentation on Build Systems</a> : Complete documentation on all available options, variables, etc.</p></div><p>Build systems let you run your files through external programs like <code>make</code>, <code>tidy</code>, interpreters, etc.</p><p>Executables called from build systems must be in your <strong><code>PATH</code></strong>.</p><h2 id="file-format" tabindex="-1">File Format <a class="header-anchor" href="#file-format" aria-label="Permalink to &quot;File Format&quot;">​</a></h2><p>Build systems are JSON files and have the extension <code>.sublime-build</code>.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>Here&#39;s an example of a build system:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;cmd&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;python&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-u&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;$file&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;file_regex&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;^[ ]*File </span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">(...*?)</span><span style="color:#79B8FF;">\\&quot;</span><span style="color:#9ECBFF;">, line ([0-9]*)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;selector&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;source.python&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;cmd&quot;</span><span style="color:#24292E;">: [</span><span style="color:#032F62;">&quot;python&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;-u&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;$file&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;file_regex&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;^[ ]*File </span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">(...*?)</span><span style="color:#005CC5;">\\&quot;</span><span style="color:#032F62;">, line ([0-9]*)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;selector&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;source.python&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>cmd</code> : Required. This option contains the actual command line to be executed.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">python</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/path/to/current/file.ext</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">python</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/path/to/current/file.ext</span></span></code></pre></div>`,11),u=e("code",null,"file_regex",-1),d=t('<p><code>selector</code> : If the <strong>Tools | Build System | Automatic</strong> option is set, Sublime Text will automatically find the corresponding build system for the active file by matching <code>selector</code> to the file&#39;s scope.</p><p>In addition to options, you can use some variables in build systems too, as we have done above with <code>$file</code>, which expands to the active buffer&#39;s filename.</p><h2 id="where-to-store-build-systems" tabindex="-1">Where to Store Build Systems <a class="header-anchor" href="#where-to-store-build-systems" aria-label="Permalink to &quot;Where to Store Build Systems&quot;">​</a></h2><p>Build systems must be located somewhere under the Packages folder (e.g. <code>Packages/User</code>). Many packages include their own build systems.</p><h2 id="running-build-systems" tabindex="-1">Running Build Systems <a class="header-anchor" href="#running-build-systems" aria-label="Permalink to &quot;Running Build Systems&quot;">​</a></h2>',5),y=e("strong",null,"Tools → Build",-1);function h(m,E,b,f,g,_){const o=n("Key");return p(),r("div",null,[i,e("p",null,[u,s(" : A Perl-style regular expression to capture error information from an external program's output. This information is used to help you navigate through error instances with "),a(o,{k:"f4"}),s('".')]),d,e("p",null,[s("Build systems can be run by pressing "),a(o,{k:"f7"}),s(" or from "),y,s(".")])])}const B=l(c,[["render",h]]);export{F as __pageData,B as default};
