import{_ as l,D as p,c as k,o as h,a2 as n,m as a,a as i,H as t}from"./chunks/framework.D2WwjMX2.js";const F=JSON.parse('{"title":"Key Bindings","description":"","frontmatter":{"title":"Key Bindings"},"headers":[],"relativePath":"guide/customization/key_bindings.md","filePath":"guide/customization/key_bindings.md","lastUpdated":1738510916000}'),o={name:"guide/customization/key_bindings.md"};function d(r,s,E,g,u,y){const e=p("Key");return h(),k("div",null,[s[16]||(s[16]=n(`<h1 id="key-bindings" tabindex="-1">Key Bindings <a class="header-anchor" href="#key-bindings" aria-label="Permalink to &quot;Key Bindings&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">See Also</p><p><a href="/reference/key_bindings.html">Reference for key bindings</a> : Complete documentation on key bindings.</p></div><p>Key bindings let you map sequences of key presses to commands.</p><h2 id="file-format" tabindex="-1">File Format <a class="header-anchor" href="#file-format" aria-label="Permalink to &quot;File Format&quot;">​</a></h2><p>Key bindings are defined in JSON and stored in <code>.sublime-keymap</code> files.</p><p>In the same package, separate keymap files for Linux, OSX and Windows may exist for better OS integration.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl+shift+n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new_window&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl+o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prompt_open_file&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="defining-and-overriding-key-bindings" tabindex="-1">Defining and Overriding Key Bindings <a class="header-anchor" href="#defining-and-overriding-key-bindings" aria-label="Permalink to &quot;Defining and Overriding Key Bindings&quot;">​</a></h2><p>Sublime Text ships with default key bindings (for example, <code>Packages/Default/Default (Windows).sublime-keymap)</code>. In order to override default key bindings or add new ones, use a separate keymap file with higher precedence: for example, <code>Packages/User/Default (Windows).sublime-keymap</code>.</p><h2 id="advanced-key-bindings" tabindex="-1">Advanced Key Bindings <a class="header-anchor" href="#advanced-key-bindings" aria-label="Permalink to &quot;Advanced Key Bindings&quot;">​</a></h2><p>Simple key bindings consist of a sequence of one or more keys mapped to a command. However, there are more complex syntaxes for passing arguments to commands and restricting key bindings to specific contexts.</p><h3 id="passing-arguments" tabindex="-1">Passing Arguments <a class="header-anchor" href="#passing-arguments" aria-label="Permalink to &quot;Passing Arguments&quot;">​</a></h3><p>Use the <code>args</code> key to specify arguments:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shift+enter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;insert&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} }</span></span></code></pre></div>`,15)),a("p",null,[s[0]||(s[0]=i("Here, ")),s[1]||(s[1]=a("code",null,"\\n",-1)),s[2]||(s[2]=i(" is passed to the ")),s[3]||(s[3]=a("code",null,"insert",-1)),s[4]||(s[4]=i(" command whenever ")),t(e,{k:"shift+enter"}),s[5]||(s[5]=i(" is pressed."))]),s[17]||(s[17]=n(`<h3 id="contexts" tabindex="-1">Contexts <a class="header-anchor" href="#contexts" aria-label="Permalink to &quot;Contexts&quot;">​</a></h3><p>Contexts determine whether a given key binding is enabled based on the caret&#39;s position or some other state.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;escape&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clear_fields&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;context&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;has_next_field&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;operator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;equal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;operand&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,3)),a("p",null,[s[6]||(s[6]=i("This key binding translates to ")),s[7]||(s[7]=a("em",null,"clear snippet fields and resume normal editing if there is a next snippet field available",-1)),s[8]||(s[8]=i(". Thus, pressing ")),t(e,{k:"escape"}),s[9]||(s[9]=i(" will only trigger this key binding if you are cycling through snippet fields."))]),s[18]||(s[18]=n('<p>The same key binding may be mapped to multiple contexts, so a single sequence of key presses may produce different results at different times.</p><h3 id="key-chords" tabindex="-1">Key Chords <a class="header-anchor" href="#key-chords" aria-label="Permalink to &quot;Key Chords&quot;">​</a></h3><p>You can create key bindings composed of multiple keys.</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl+k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ctrl+v&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;paste_from_history&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div>',4)),a("p",null,[s[10]||(s[10]=i("Here, to trigger the command ")),s[11]||(s[11]=a("code",null,"paste_from_history",-1)),s[12]||(s[12]=i(", you have to press ")),t(e,{k:"ctrl+k"}),s[13]||(s[13]=i(" first, then release ")),t(e,{k:"k"}),s[14]||(s[14]=i(", and finally press ")),t(e,{k:"v"}),s[15]||(s[15]=i("."))]),s[19]||(s[19]=a("p",null,"Note: This example is a default key binding, so you can try it out for yourself.",-1))])}const q=l(o,[["render",d]]);export{F as __pageData,q as default};
