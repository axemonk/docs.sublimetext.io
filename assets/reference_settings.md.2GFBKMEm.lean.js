import{_ as a,C as n,c as l,o as r,a2 as o,j as t,a as d,G as s}from"./chunks/framework.CwCSXIY0.js";const b=JSON.parse('{"title":"Settings","description":"","frontmatter":{"title":"Settings"},"headers":[],"relativePath":"reference/settings.md","filePath":"reference/settings.md","lastUpdated":1738694335000}'),c={name:"reference/settings.md"};function p(u,e,h,f,g,m){const i=n("Key");return r(),l("div",null,[e[23]||(e[23]=o("",8)),t("dl",null,[e[13]||(e[13]=t("dt",null,[t("code",null,"auto_indent")],-1)),e[14]||(e[14]=t("dd",null,[t("p",null,"Toggles automatic indentation.")],-1)),e[15]||(e[15]=t("dt",null,[t("code",null,"tab_size")],-1)),e[16]||(e[16]=t("dd",null,[t("p",null,"Number of spaces a tab is considered equal to.")],-1)),e[17]||(e[17]=t("dt",null,[t("code",null,"translate_tabs_to_spaces")],-1)),t("dd",null,[t("p",null,[e[0]||(e[0]=d("Determines whether to replace a tab character with ")),e[1]||(e[1]=t("code",null,"tab_size",-1)),e[2]||(e[2]=d(" number of spaces when ")),s(i,{k:"tab"}),e[3]||(e[3]=d(" is pressed."))])]),e[18]||(e[18]=t("dt",null,[t("code",null,"use_tab_stops")],-1)),t("dd",null,[t("p",null,[e[4]||(e[4]=d("If ")),e[5]||(e[5]=t("code",null,"translate_tabs_to_spaces",-1)),e[6]||(e[6]=d(" is ")),e[7]||(e[7]=t("code",null,"true",-1)),e[8]||(e[8]=d(", will make ")),s(i,{k:"tab"}),e[9]||(e[9]=d(" and"))]),s(i,{k:"backspace"}),e[10]||(e[10]=d(" insert/delete ")),e[11]||(e[11]=t("code",null,"tab_size",-1)),e[12]||(e[12]=d(" number of spaces per key press."))]),e[19]||(e[19]=o("",8))]),e[24]||(e[24]=o("",5)),t("dl",null,[e[22]||(e[22]=o("",11)),t("dd",null,[t("p",null,[e[20]||(e[20]=d("Determines whether pressing ")),s(i,{k:"tab"}),e[21]||(e[21]=d(" will insert completions."))])])]),e[25]||(e[25]=o("",6))])}const w=a(c,[["render",p]]);export{b as __pageData,w as default};
